// Requiring Module --------------------------------
const express = require('express');
const https = require('https');
const path = require('path');
const fs = require('fs');


// Constants --------------------------------
const projectDir = '/home/projectResume';
const unsecurePort = 80;
const securePort = 443; //switch to port 443 after tests for security
const app = express();


// SSL KEY --------------------------------
const privateKey = fs.readFileSync('/home/e/SSL/key.pem');
const certificate = fs.readFileSync('D:/Documents/Microsoft VS Code/projectResume/SSL/cert.pem');
var credentials = {key: privateKey, cert: certificate};


// Initialization --------------------------------
app.use(express.static(__dirname + '/public')); //initate the use of all files in public
const server = https.createServer(credentials, app); //create the server using https and SSL


// Routing/pathways --------------------------------
// Route handling '/' request (get post put delete)
app.get('/', (req, res) => {
    res.sendFile(path.join(projectDir, '/index.html'));
});

// Route handling '/about' request
app.get('/about', (req, res) => {
    res.send('<h2>YEAHYEAHDABABY</h2>');
});

// set up a way to redirect http to https


// security stuff --------------------------------
const helmet = require('helmet'); //middleware for security
app.use(helmet()); //initiate helmet

// create a whitelist for helmet to stop errors of website connecting to other sites
const csp = require('helmet-csp');
app.use(csp({
    defaultSrc: ['self', 'fonts.googleapis.com']
    //scriptSrc
    //fontSrc
    //styleSrc
}))

// Don't use default session cookie name, default session cookie name can be used to fingerprint
// the server and target attacks
var session = require('express-session'); //middleware to avoid this
app.set('trust proxy', 1); // trust first proxy
app.use(session({
    secret: 's3Cur3', //?
    name: 'sessionId'
}))

// set cookie security options to enhance security
//secure - Ensures the browser only sends the cookie over HTTPS.
//httpOnly - Ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.
//domain - indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.
//path - indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.
//expires - use to set expiration date for persistent cookies.
var session = require('cookie-session');

var expiryDate = new Date(Date.now() + 60 * 60 * 1000) // 1 hour
app.use(session({
    name: 'session',
    keys: ['key1', 'key2'], //keys
    cookie: {
        secure:true,
        httpOnly:true,
        domain: "example.com", // change
        path: 'foo/bar', //change
        expires: expiryDate
    }
}))

//Prevent brute-force attacks against authorization
//Make sure login endpoints are protected to make private data more secure.
//A simple and powerful technique is to block authorization attempts using two metrics:
//The first is number of consecutive failed attempts by the same user name and IP address.
//The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.
// rate-limiter-flexible package provides tools to make this technique easy and fast https://github.com/animir/node-rate-limiter-flexible
//examples:https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection

// use snyk to ensure dependencies are secure https://expressjs.com/en/advanced/best-practice-security.html
//Use csurf middleware to protect against cross-site request forgery (CSRF). https://www.npmjs.com/package/csurf
// Always filter and sanitize user input to protect against cross-site scripting (XSS) and command injection attacks.
//Defend against SQL injection attacks by using parameterized queries or prepared statements.
//Use the open-source sqlmap tool to detect SQL injection vulnerabilities in your app. http://sqlmap.org/
//Use the nmap and sslyze tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate. https://github.com/nabla-c0d3/sslyze
//Use safe-regex to ensure your regular expressions are not susceptible to regular expression denial of service attacks. https://www.npmjs.com/package/safe-regex
//https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS


// Server setup --------------------------------
//listen for request on port 443, and as a callback function have the port listened on logged
server.listen(securePort, () => {
    console.log('server listening on port ' + securePort);
});
